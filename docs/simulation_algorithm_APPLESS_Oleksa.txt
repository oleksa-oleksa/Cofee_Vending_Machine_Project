// Created by Oleksandra Baga
// System Test for Coffee Vending Machine Project

// Header
// Define all global variables that not in mainwindow.h and enum

// cpp - file

// global sensors and actuators 
ControlUnit control;

RFID_Scanner cardScanner;
Flowmeter flow;
OpticalSensor opticalSensor(&flow);
PressureSensor pressureSensor;
TemperaturSensor temperatureSensor;
BrightnessSensor brightSensor;

LCD_Display display;
DC_Motor motor[4];
Waterheater heater;
Milkmaker milkMaker;

Brewgroup brew;


// global pointers:
Person *activePerson = NULL;
Card *card = NULL;
Account *activeAccount = NULL;
BankAccount *bankAccount = NULL;
InteractionUnit iunit;
UserChoice *activeUserChoice = NULL;

// global buttons:
Button moreSugar;
Button lessSugar;
Button moreMilk;
Button lessMilk;
Button coffee;
Button cappuccino;
Button espresso;
Button latteMacchiato;
Button cacao;
Button hotWater;
Button bigPortion;
Button cancel;
Button start;

// Firstly, we will start with a card provided by user into RFID
card = &Card::AllCards[0];

// Thus we can find out which account belongs to the card
activeAccount = card->getAccount();

// and what the person interacts with Vending Machine
activePerson = card->getAccount()->getOwner();

// and which bank account is connected to the card for withdrawing process
bankAccount = card->getAccount()->getBankAccount();


// Note: to simulate invalid card
// 1: Comment all card, ba, acc and person lines
// 2. create a new random Card *card
// 3. run program

//======================================================================
// and finaly: UserChoice initialisation in InteractionUnit in order
// to track all interactions with buttons
// This solution based on UML Diagramm created for the University Course
iunit.setMoreSugar(&moreSugar);
iunit.setLessSugar(&lessSugar);
iunit.setMoreMilk(&moreMilk);
iunit.setLessMilk(&lessMilk);
iunit.setCoffee(&coffee);
iunit.setCappuccino(&cappuccino);
iunit.setEspresso(&espresso);
iunit.setLatteMacchiato(&latteMacchiato);
iunit.setCacao(&cacao);
iunit.setHotWater(&hotWater);
iunit.setBigPortion(&bigPortion);
iunit.setCancel(&cancel);
iunit.setStart(&start);


// activeUserChoice has the selected drink with  price and recipe
// the information for preparation will be transfered to ControlUnit with "Start" button
activeUserChoice = iunit.initUserChoice(card);

// link UserChoice to ControlUnit
control.linkUserChoice(activeUserChoice);

// Connect the sensors
control.connectRFID(&cardScanner);
control.connectFlow(&flow);
control.connectOptical(&opticalSensor);
control.connectPressure(&pressureSensor);
control.connectTemperatur(&temperatureSensor);
control.connectBrightnessSensor(&brightSensor);

// connect the actuators
control.connectLCD(&display);
//control.connectMotor(&motor, 4);
control.connectHeater(&heater);
control.connectMilkMaker(&milkMaker);
control.connectBrewGroup(&brew);

// check sensors and actuators
control.maintenanceRoutine();

// block the possibility to change drinks settins
// without a valid card inside (set the variable isCardInside)
if (!control.checkCardReader()) {
     activeUserChoice->setSelectedDrink(NO_DRINK);
}

//=============================================================
// Now we can design the Main Window

// Simulate LCD:
display.writeDefaultText(activeUserChoice);

// sumulate no cup in holder
opticalSensor.setDistanceToObject(10);
// test cup absence simulation
opticalSensor.getOpticalFlowSensorsMeasurements();


//=============================================================
// Simulate INSERT CARD
// Now there is no card and this code should set isCardInside = true and isChoiceAllowed = true 

simulateCardButtonPush();


//=============================================================
// Simulated: Card is inserted, name and greeting
// no price and no selected drink name

// Sumulation: Select "Coffee"
coffee.setSensorstate(PRESSED);
iunit.buttonPollingRoutine();
coffee.setSensorstate(RELEASED);
display.writeUserChoiceText(activeUserChoice);


// Decrease default sugar amount by 1
lessSugar.setSensorstate(PRESSED);
iunit.buttonPollingRoutine();
lessSugar.setSensorstate(RELEASED);
display.writeUserChoiceText(activeUserChoice);


// Increase default milk amount by 1 + 1
// First
moreMilk.setSensorstate(PRESSED);
iunit.buttonPollingRoutine();
moreMilk.setSensorstate(RELEASED);
display.writeUserChoiceText(activeUserChoice);


// Second
moreMilk.setSensorstate(PRESSED);
iunit.buttonPollingRoutine();
moreMilk.setSensorstate(RELEASED);
display.writeUserChoiceText(activeUserChoice);


// Choose Big Portion

bigPortion.setSensorState(PRESSED);
iunit.buttonPollingRoutine();
bigPortion.setSensorState(RELEASED);
display.writeUserChoiceText(activeUserChoice);

// COMPARE IN QTEST
// here the calls for QVERIFY AND QCOMPARE
 

// User has selected a drink and pushes the Start Button:
// But he has forgot to place a cup!







//==============================================
// FUNCTIONS (for DRY)

// !!!! Set return values for tests !!!!


RETURN simulateCardButtonPush() {

    // this code works with RFID Scanner Simulation

    // if NO card in RFID
    if (!RFID_s.getIsCardInside())
    {
        // if card is valid, user can purchase a drink
  
        // After card was inserted, the RFID Scanner provides verification
        // without instructions outside
        // modifies private attribute isChoiceAllowed for InteractionUnit
        if (RFID_s.insertCard(card))
        {
            // MODEL
            display.writeGreetingText(activeUserChoice);
        }

        // if card is not valid, it will ba automaticaly ejected 
        // and the purschasing will be ended
        // the next card can be inserted in RFID
        else
        {
            // MODEL
            display.writeErrorText();
            RFID_s.ejectCard();
        }
    }

    // if there IS A CARD
    else
    {
        // MODEL
        RFID_s.ejectCard();
        delete(activeUserChoice);
        activeUserChoice = iunit.initUserChoice(card);
        display.writeDefaultText(activeUserChoice);
    }
}


RETURN simulateStartButtonPush() {
    
}
